| {% extends "dillo/base_single_card.pug" %}
| {% load i18n %}
| {% load pipeline %}
| {% block page_title %}{% trans "Create Post" %}{% endblock %}
| {% block body_classes %}page-create{% endblock %}

| {% block head_extra %}
| {% stylesheet 'edit' %}
| {% endblock head_extra %}

| {% block content_card %}
.post-form-container
  if error_message
    p.text-danger.p-3
      strong {{ error_message }}

  #uppy-drop-area(
    data-post_id="{{ post.id }}",
    data-content_type_id="{{ post.content_type_id }}",
    data-api-get-unpublished-uploads-url="{% url 'api-get-unpublished-uploads' post.content_type_id post.hash_id %}",
    data-api-delete-unpublished-upload-url="{% url 'api-delete-unpublished-upload' post.content_type_id post.hash_id %}",
  )

  form(action="{% url 'post_create' %}", method="post", enctype="multipart/form-data")
    .form-group
      | {% csrf_token %}
      | {{ form }}

    .form-group
      .btn-toolbar-row
        button.post-create-btn.disabled.btn-lg(
          disabled,
          type='submit',
          class="js-post-create-btn")
          span {% trans "Create Post" %}

  .form-tip
    span {% trans "Tip: Use #hashtags to increase discoverability." %}
    div Trying to upload your reel? #[a(href="{% url 'profile_edit' %}") Add your reel to your profile].


| {% endblock content_card %}

| {% block javascript_extra %}
script(src="https://transloadit.edgly.net/releases/uppy/v1.21.2/uppy.min.js")
script.
  const $uppy_drop_area = $('#uppy-drop-area');
  const uppy = Uppy.Core({
    autoProceed: true,
  });
  uppy.use(Uppy.Dashboard, {
    theme: 'dark',
    inline: true,
    width: '100%',
    height: '300px',
    allowMultipleUploads: true,
    showRemoveButtonAfterComplete: true,
    target: '#uppy-drop-area'
  });
  // uppy.use(Uppy.DragDrop, { target: '#uppy-drop-area' })
  uppy.use(Uppy.AwsS3, {
    limit: 4,
    // companionUrl: 'https://uppy.anima.to/',
    getUploadParameters(file) {
      // Send a request to our signing endpoint.
      return fetch('/s3-sign', {
        method: 'post',
        // Send and receive JSON.
        headers: {
          accept: 'application/json',
          'content-type': 'application/json'
        },
        body: JSON.stringify({
          filename: file.name,
          contentType: file.type
        })
      }).then((response) => {
        // Parse the JSON response.
        return response.json()
      }).then((data) => {
        // Return an object in the correct shape.
        return {
          method: data.method,
          url: data.url,
          fields: data.fields,
          headers: {},
        }
      })
    }
  })
  $.ajax({
    url: $uppy_drop_area.data('apiGetUnpublishedUploadsUrl'),
    type: 'post',
    dataType: 'json',
    success: function (response) {
      $.each(response.media, function (key, value) {
        // Create a mockFile from existing uploaded data
        let mockFile = {
          name: value.name,
          size: value.size,
          dataURL: value.url,
          entityMediaId: value.entity_media_id
        };

        fetch(value.url)
        .then((response) => response.blob()) // returns a Blob
        .then((blob) =>
          uppy.addFile({
            name: mockFile.name,
            data: blob
          })
        )
        .then((fileId) => {
          uppy.setFileState(fileId, {
            progress: {uploadComplete: true, uploadStarted: true}
          });
          uppy.setFileMeta(fileId, {
            entityMediaId: mockFile.entityMediaId,
          });
        })
      });
    }
  });


  uppy.on('upload-success', (file, data) => {
    let payload = {
      entity_id: parseInt($uppy_drop_area.data('post_id')),
      content_type_id: parseInt($uppy_drop_area.data('content_type_id')),
      name: file.meta['name'],
      mime_type: file.type,
      key: file.meta['key'],
      size_bytes: file.size,
    };
    $.post(
      '/attach-media-to-entity', payload
    ).done(function(data) {
      uppy.setFileMeta(file.id, {
        entityMediaId: data.entity_media_id,
      });
    });
  })

  uppy.on('file-removed', (file, reason) => {
    if (reason === 'removed-by-user') {
      $.ajax({
        type: 'post',
        url: $uppy_drop_area.data('apiDeleteUnpublishedUploadUrl'),
        data: {'entity_media_id': file.meta.entityMediaId},
        dataType: 'json'
      });
    }
  })

  let $postDescription = $('#id_title');

  // Auto-resize text field as we type.
  $postDescription.autoResize();

  // Disable the Create Post button if text field is empty and no (valid) files were uploaded.
  $postDescription.on('keyup', function () {
    let totalFilesCount = uppy.getFiles().length;
    if ($.trim($postDescription.val()) && totalFilesCount > 0) {
      $('.js-post-create-btn')
        .removeClass('disabled')
        .prop('disabled', false);
    } else {
      $('.js-post-create-btn')
        .addClass('disabled')
        .prop('disabled', true);
    }
  });


| {% endblock javascript_extra %}
