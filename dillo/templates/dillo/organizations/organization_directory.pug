| {% extends "dillo/base_single_card.pug" %}
| {% load pipeline %}

| {% block head_extra %}
title Users World Map
script(src='//unpkg.com/d3-array')
script(src='//unpkg.com/d3-scale')
script(src='//unpkg.com/globe.gl')
| {% stylesheet 'edit' %}
| {% javascript 'choices' %}

| {% endblock head_extra %}

| {% block content %}

.row.dir-container
  .col-md-5
    .form-field-container
      select#category.js-choice.js-choice-multi(name="category", multiple)
        | {% for category in search_facets.categories %}
        option(selected=category.is_selected value="{{ category.value }}") {{ category.label }}
        | {% endfor %}

    .dir-city-title.pb-3
      h2#selected-city {% if search_facets.cities %} {{ search_facets.cities.0 }} {% endif %}

      .ml-auto.btn#clear-city(
        style="{% if not search_facets.cities %}display:none{% endif %}",
        onclick="clearCityFilter()")
        span Clear Filter

    ul.dir-items-list#organization-list

  .col-md-7.dir-globe#globe-container
    .globe-container
    .globe#globe

| {% endblock content %}

| {% block javascript_extra %}

| {% block js_data %}
| {{ block.super }}
| {% endblock js_data %}

| {% block vue_components %}
| {{ block.super }}
| {% endblock vue_components %}

| {% block vue_script %}
| {% javascript 'vue_generic' %}
| {% endblock vue_script %}

script.

  let url = new URL(window.location);
  const urlParams = new URLSearchParams();
  let choices = [];

  function fetchItems(url) {
    url.pathname = '/api/o/'
    fetch(url)
      .then(response => response.text())
      .then(data => {
        document.getElementById('organization-list').innerHTML = data;
        const historyUrl = new URL(window.location);
        historyUrl.search = url.search;
        window.history.pushState({}, '', historyUrl);
      });
  }

  function fetchItemsGlobe(url, globe) {
    url.pathname = '/api/o-globe'
    fetch(url)
      .then(response => response.json())
      .then(data => {
        globe.pointsData(data.locations);
      });
  }

  function fetchItemsByCity(cityId, cityName, urlParams) {
    urlParams.delete('city');
    urlParams.append('city', cityId);
    url.search = urlParams.toString();
    fetchItems(url);
    document.getElementById('selected-city').innerText = cityName;
    document.getElementById('clear-city').style.display = "flex";
  }

  function updateUrlParams() {
    for (let choice of choices) {
      let key = choice.passedElement.element.id;
      urlParams.delete(key);
      if (choice._isSelectMultipleElement) {
        for (let v of choice.getValue(true)) {
          urlParams.append(key, v);
        }
      } else {
        // Passing the whole value of the select, if single select.
        // Otherwise, each char is iterated over
        urlParams.append(key, choice.getValue(true));
      }
    }
  }

  function setupGlobe() {
    const elem = document.getElementById('globe');
    const globe = Globe()
      .showGlobe(true)
      .bumpImageUrl('//unpkg.com/three-globe/example/img/earth-topology.png')
      .showAtmosphere(true) // globe has no atmosphere
      .atmosphereColor('hsl(223, 100%, 9%)')
      .backgroundColor('hsl(220, 13%, 9%)')
      .height(elem.offsetHeight)
      .width(elem.offsetWidth)
      .polygonCapColor(feat => 'hsl(223, 60%, 5%)')
      .polygonSideColor(() => 'hsla(223, 100%, 12%, 0)')
      .polygonStrokeColor(() => 'hsl(223, 100%, 59%)')
      .pointColor(() => 'hsla(0, 0%, 100%, 0.8)')
      .pointLabel('cityName')
      .pointAltitude(d => d.count / 100)
      .onPointClick(d => fetchItemsByCity(d.cityId, d.cityName, urlParams))
      (elem);
    globe.pointOfView({lat: 45, lng: 5, altitude: 3});

    const globeMaterial = globe.globeMaterial();
    globeMaterial.shininess = 0;

    fetch('https://raw.githubusercontent.com/vasturiano/globe.gl/master/example/datasets/ne_110m_admin_0_countries.geojson').then(res => res.json()).then(countries => {
      globe.hexPolygonsData(countries.features);
      globe.hexPolygonResolution(3);
      globe.hexPolygonMargin(0.3);
      globe.hexPolygonColor(() => `#${Math.round(Math.random() * Math.pow(2, 24)).toString(16).padStart(6, '0')}`);
    });

    return globe;
  }

  let globe = setupGlobe();

  const choiceElements = document.getElementsByClassName('js-choice-multi');

  for (let choiceElement of choiceElements) {
    let choice = new Choices(choiceElement, {
      placeholderValue: `Select ${choiceElement.name}`,
      removeItemButton: true
    });

    choices.push(choice);
    choiceElement.addEventListener(
      'change',
      function (event) {
        updateUrlParams();
        url.search = urlParams.toString();
        fetchItems(url);
        fetchItemsGlobe(url, globe)
      },
      false,
    );
  }

  // On page load fetch all organizations
  fetchItems(url);
  fetchItemsGlobe(url, globe);

  function clearCityFilter() {
    fetchItems(url);
    document.getElementById('clear-city').style.display = "none";
    document.getElementById('selected-city').innerText = "Select a City in the Map";
    urlParams.delete('city');
    url.search = urlParams.toString();
    fetchItems(url);

  }

  // Load more profiles (async)
  $(document).on('click', '.js-load-more', function (event) {
    let $organizationListContainer = $('#organization-list');
    let $loadMoreButton = $(this);
    $.get($(this).data('next_url'), function (data) {
      $organizationListContainer.append(data);
      $loadMoreButton.remove();
    });
  });

| {% endblock javascript_extra %}
